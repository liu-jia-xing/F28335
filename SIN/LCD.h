/*
 * LCD.h
 *
 *  Created on: 2017年11月27日
 *      Author: lenovo
 */

#include "DSP28x_Project.h"

#ifndef LCD_H_
#define LCD_H_

// 宏定义
#define uchar unsigned char

#define RST_1       GpioDataRegs.GPADAT.bit.GPIO3=1             //GPIO3做RST
#define RST_0       GpioDataRegs.GPADAT.bit.GPIO3=0             //GPIO3做RST
// 数字和英文字符,Uint16会生成16位编码，如：'0'=0x0030
uchar str_ENG[]="A1511";
uchar str_10[]="04";
uchar str_date[]="2017.10.23";
uchar jju_fig8[];
// 定义中文字符编码变量，ST7920驱动型LCD只能显示下面编号的宋体字，实际大小为16*16点阵
uchar   jju[]={0xBEC5,0xBDAD,0xD1A7,0xD4BA,0xB5E7,0xD7D3,0xD1A7,0xD4BA};   //“九江学院”编码
uchar   echo[] = {0xD0C5,0xBAC5,0xB7A2,0xC9FA,0xC6F7};//信号发生器
uchar   pinlv[] = {0xC6B5,0xC2CA,0xCEAA};//频率为
uchar   pinlv1[] = {0xD5FD,0xCFD2,0xC6B5,0xC2CA,0xCEAA};//正弦频率为
uchar   pinlv2[] = {0xC8FD,0xBDC7,0xC6B5,0xC2CA,0xCEAA};//三角频率为
uchar   pinlv3[] = {0xB7BD,0xB2A8,0xC6B5,0xC2CA,0xCEAA};//方波频率为
uchar   str_hz[] = "HZ";
uchar   dian[] = {0xB5E7};
uchar   Class[] = {0xB0E0};
uchar   number[] = {0xBAC5};
uchar   name[] = {0xCFC4,0xB1F2};
uchar   design[] = {0xC9E8,0xBCC6};

//extern unsigned char  distance[7];
//extern float Distance = 0;//测量实际频率，单位Hz
//extern int qian = 0;
//extern int bai = 0;//存储实际频率的百位 用于转化为12864的显示代码
//extern int shi = 0;//存储十位
//extern int ge = 0;//存储个位
//extern int shi_x = 0;//存储小数部分的十位
//extern int ge_x = 0;//存储小数部分的个位


// 函数声明：
//函数名称      ：getDistanceCode：将所得频率转化为LCD的输出字符
//extern void getDistanceCode(void);
// 函数名称    ：InitLcdGpio：设置GPIO2/3/4/5引脚为输出引脚，连接到作LCD。
void InitLcdGpio(void);

// 函数名称    ：InitLcdFun：初始化LCD接口功能
void InitLcdFun( void );

// 函数名称    ：ReadByte：从LCD读一个8bit数据，结果放在data（生成传输波形，这里的数据不考虑是命令还是显示数据）
Uint16 ReadByte(void);

// 函数名称    ：WriteByte：写一个8bit数据到LCD（生成传输波形，这里的数据不考虑是命令还是显示数据）
void WriteByte(Uint16 x);


// 函数名称    ：WriteLcdCmd: 写一个8bit命令到LCD
void WriteLcdCmd(Uint16 data) ;

// 函数名称    ：WriteLcdData: 写8位数据到LCD，本函数不考虑发送地址
// 输入：Uint16 data：8位数据，
void WriteLcdData(Uint16 data);

// 函数名称    ：ReadLcdData
Uint16 ReadLcdData(void);

// 函数名称    ：LcdClearTxt
// 功能描述    ：清除全部字符，光标回到（0,0）处，（用空白字符填充文本区）
void LcdClearTxt( void );

// 函数名称    ：LcdClearBmp
// 功能描述    ：图形区清RAM函数
void LcdClearBmp( void );

// 函数名称    ：DispCHN:显示汉字串
// 显示起始位置：
// uchar row：行号：0-3
// uchar col：列号：0-7
// 字符指针：uchar *puts
// 字符数：uchar nums，不超过32个
void DispCHN(uchar row,uchar col,uchar *puts,Uint16 nums);

/******************************************************************************************
* 函数名称    ：DispENG:显示英语字符或数字串
* 显示起始位置：
* uchar row：行号：0-3
* uchar col：列号：0-7
* 字符指针：uchar *puts
* 字符数：uchar nums，不超过64个，奇数个字符时，自动加一个空格
******************************************************************************************/
void DispENG(uchar row,uchar col,uchar *puts,Uint16 nums);

/******************************************************************************************
* 底层函数，在DispFig中调用
* 函数名称：disp_figdata:在指定位置显示一个字的像素，数据横排，位顺序左高右低，1表示亮
* uchar,row：指定起始行，0~63
* uchar,col：指定起始列，0~7
*******************************************************************************************/
void DispFigData(uchar  row, uchar  col, uchar  *figdata);


/******************************************************************************************
* 函数名称    ：DispFig:显示128x64图片，横向取模，字节正序，16位数据格式（数据横排，8个像素对应一个字节，位顺序左高右低）
*         亮暗方式：0x55的图形为：0101  0101，0表示暗，1表示亮。
******************************************************************************************/
void DispFig(uchar *fig);

/******************************************************************************************
* 函数名称    ：DispFigTest:按顺序产生16位点阵数据，放在fig[]中，并显示。
* fig[]为64行、8列，每个数据16位，共512单元
* 显示128x64图片，横向取模，字节正序，16位数据格式
******************************************************************************************/
void DispFigTest(void);

/******************************************************************************************
* 函数名称    ：DispFig:显示128x64图片，横向取模，字节正序，16位数据格式,上下屏数据结构
******************************************************************************************/
void DispFigUd(uchar *fig);

/******************************************************************************************
* 函数名称    ：DispFig8:显示128x64图片，横向取模，字节正序，8位数据格式
* （数据横排，8个像素对应一个字节，位顺序左高右低）
*         亮暗方式：0x55的图形为：0101  0101，0表示暗，1表示亮。
******************************************************************************************/
void DispFig8(uchar *fig);


/******************************************************************************************
* 底层函数，产生点像素编码，并贴加在fig[]上
* uchar,row：指定起始行，0~63
* uchar,col：指定起始列，0~127
*******************************************************************************************/
void GetDotData(uchar row, uchar col);


/******************************************************************************************
* 将贴加在fig[]上一个点像素显示LCD上
* uchar,row：指定起始行，0~63
* uchar,col：指定起始列，0~127
*******************************************************************************************/
void DispDot(uchar row, uchar col,uchar *fig);


/******************************************************************************************
* 底层函数，产生点像素编码，并贴加在fig[]上
* uchar,row：指定起始行，0~63
* uchar,col：指定起始列，0~127
*******************************************************************************************/
void GetLineData(uchar *start, uchar *end);


/******************************************************************************************
* 将贴加在fig[]上一条线像素显示LCD上
* uchar,row：指定起始行，0~63
* uchar,col：指定起始列，0~127
*******************************************************************************************/
void DispLine(uchar *start, uchar *end, uchar *fig);

/******************************************************************************************
* 清除fig[]数据
*******************************************************************************************/
void ClearFigBack(void);

/******************************************************************************************
* 函数功能：在指定起始位置显示一段像素（pixels,dots），数据横排，位顺序左高右低，1表示亮
* uchar,row：指定起始行，0~63
* uchar,col：指定起始列，0~7
* uchar,*figdata:数据指针
* Uint16,nums：数据个数，最多64*16=1024个。
*******************************************************************************************/
void DispDots(uchar row,uchar col,uchar *figdata,Uint16 nums);


/******************************************************************************************
* 函数名称    ：Delay，时间单位：ms
******************************************************************************************/
void Delay(Uint16 MS);

/******************************************************************************************
* 函数名称    ：LcdDelay：按键延迟函数：时间待定
******************************************************************************************/
void LcdDelay(Uint16 Second , Uint16 MS100);
/******************************************************************************************
* 函数名称    ：delay_loop
******************************************************************************************/
void delay_loop(Uint32 x);


uchar jju_fig8[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x1C,0x00,
0x00,0x03,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x08,0x77,0x00,0x00,0x01,0x1E,0x00,
0x00,0x03,0x80,0x00,0x00,0x0E,0x00,0x00,0x00,0x0E,0x7F,0x80,0x00,0x07,0x9E,0x00,
0x00,0x07,0x40,0x00,0x00,0x1F,0x00,0x00,0x00,0x1E,0xE7,0xC0,0x00,0x0F,0x8F,0xC0,
0x00,0x07,0x80,0x00,0x00,0x1F,0x80,0x00,0x00,0x25,0xFB,0x80,0x00,0x3F,0x0F,0xE0,
0x00,0x07,0xCE,0x00,0x00,0x1F,0x80,0x00,0x00,0x2F,0xFF,0xC0,0x00,0xFF,0xDF,0xE0,
0x00,0x0B,0xFF,0x00,0x00,0x1F,0x80,0x20,0x00,0x3F,0xFF,0x80,0x00,0xFE,0xDF,0x80,
0x00,0x0F,0xFF,0x80,0x00,0x27,0x81,0xF0,0x00,0x3F,0xEF,0x00,0x01,0xBC,0xF3,0x00,
0x00,0x1F,0xFE,0x80,0x00,0x33,0x1F,0xF0,0x00,0xBF,0xFF,0xC0,0x00,0x2D,0xEB,0x00,
0x00,0x7F,0xFF,0x00,0x00,0x78,0x7F,0xC0,0x01,0xDF,0xFF,0xE0,0x01,0xFD,0xFE,0x00,
0x01,0xFF,0xFE,0x00,0x00,0x78,0xFF,0xE0,0x00,0xEF,0xFF,0xF8,0x01,0xDD,0xFF,0x80,
0x01,0xFF,0xFE,0x00,0x00,0x7B,0xFF,0xA0,0x02,0xFF,0x90,0xF8,0x00,0x6F,0xFF,0x80,
0x00,0xFF,0xFE,0x30,0x00,0x7E,0xFF,0x00,0x03,0xF7,0xFF,0xD0,0x00,0xFE,0x1F,0x80,
0x00,0xFE,0x7C,0x20,0x00,0xFF,0xBD,0xC0,0x03,0xFF,0xDD,0x80,0x00,0xFE,0x7E,0x60,
0x00,0x7C,0x74,0x30,0x00,0xFF,0x7F,0xE0,0x03,0x9E,0xAE,0x00,0x00,0xF6,0xFE,0x60,
0x00,0x7E,0x78,0x38,0x00,0xFF,0xFF,0xC0,0x01,0xD4,0xBF,0x00,0x00,0xE7,0xFE,0x50,
0x04,0xFC,0xF8,0x78,0x00,0xFF,0xFF,0xE0,0x01,0x87,0xFF,0x00,0x00,0xE7,0xEE,0x10,
0x06,0xFC,0xF8,0x78,0x00,0xFF,0xFF,0xC0,0x00,0x1F,0xFF,0x00,0x00,0xE1,0xFE,0x38,
0x0F,0xF8,0xF0,0x78,0x00,0xFD,0xFC,0x80,0x00,0x0F,0xFE,0x00,0x00,0xE0,0xFC,0x38,
0x0F,0xF8,0x7B,0xF8,0x00,0xF9,0xE0,0x00,0x00,0x1E,0x78,0x00,0x00,0xE1,0xFA,0xF8,
0x1F,0xD0,0x7F,0xF8,0x00,0x78,0x00,0x00,0x00,0x00,0xF8,0x00,0x01,0x63,0xCF,0xF8,
0x1F,0xE0,0x7F,0xF8,0x00,0x70,0x00,0x00,0x00,0x1F,0x78,0x00,0x01,0xFF,0x9F,0xF8,
0x0F,0x80,0x3F,0x90,0x00,0x00,0x00,0x00,0x00,0x1F,0xF0,0x00,0x01,0xFF,0x8F,0xB0,
0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0xE5,0x08,0xC0,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x40,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x87,0x80,0x00,0x00,
0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x00,0x7C,0x00,0x00,0x07,0xD7,0xC0,0x00,0x00,
0x00,0x00,0x00,0x01,0xE0,0x00,0x0F,0xC0,0xBC,0x00,0x00,0x07,0xCF,0x7F,0x00,0x00,
0x00,0x00,0x00,0x03,0xC0,0x00,0x07,0xE3,0xF1,0xFC,0x00,0x0F,0x1F,0x7F,0xC0,0x00,
0x00,0x00,0x3E,0xC7,0x99,0x00,0x01,0xCB,0x9F,0xFC,0x00,0x1E,0x3F,0xCD,0xC0,0x00,
0x00,0x03,0xFF,0xEF,0xFF,0xC0,0x00,0x0E,0x4E,0x3C,0x00,0x7E,0xF1,0xD0,0x00,0x00,
0x00,0x03,0xC3,0x9F,0xFF,0x40,0x0B,0x47,0x3E,0x38,0x01,0xF6,0xD1,0xDF,0x00,0x00,
0x00,0x00,0xB7,0xBB,0x0E,0x00,0x37,0xC7,0xFF,0xF8,0x03,0xCC,0x39,0xCF,0x80,0x00,
0x00,0x00,0x7F,0x23,0xC0,0x00,0x3B,0x8F,0xEF,0xF0,0x00,0x0C,0x7F,0xC2,0x80,0x00,
0x00,0x00,0x1C,0x03,0x80,0x00,0x03,0x8F,0x8E,0x60,0x00,0x0E,0x25,0x80,0x00,0x00,
0x00,0x00,0x0F,0x83,0x40,0x00,0x03,0x84,0x0E,0x00,0x00,0x04,0x3E,0xC6,0xF0,0x00,
0x00,0x00,0x3B,0xC7,0x70,0x00,0x07,0xE0,0x04,0x80,0x00,0x3B,0x3F,0x23,0xF8,0x00,
0x00,0x00,0xF1,0x4E,0x3C,0x00,0x7F,0xFF,0x8E,0x00,0x00,0x7B,0x87,0x3C,0x30,0x00,
0x00,0x07,0xC0,0x7C,0x1F,0x80,0x3C,0x1E,0xF9,0xE7,0xC0,0xF1,0xD0,0x1F,0xC0,0x00,
0x00,0x07,0x01,0xF0,0x0F,0xD4,0x00,0x00,0xDF,0xFF,0xC0,0xE0,0xF9,0xDF,0xC0,0x00,
0x00,0x00,0x01,0xC0,0x06,0xE4,0x00,0x00,0x03,0xF0,0x00,0x00,0x1F,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};


#endif /* LCD_H_ */
